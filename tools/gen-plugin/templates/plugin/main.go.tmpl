package {{.Name}}

import (
	"github.com/subscan-explorer/subscan-plugin/storage"
	"github.com/subscan-explorer/subscan-plugin/router"
    "{{.ModPath}}{{.Name}}/http"
    "{{.ModPath}}{{.Name}}/service"
	"github.com/shopspring/decimal"
)

var srv *service.Service

type {{.ModClass}} struct {
	d storage.Dao
}

func New() *{{.ModClass}} {
	return &{{.ModClass}}{}
}

func (a *{{.ModClass}}) InitDao(d storage.Dao) {
	srv = service.New(a.d)
	a.d = d
	a.Migrate()
}

func (a *{{.ModClass}}) InitHttp() []router.Http{
	return http.Router(srv)
}

func (a *{{.ModClass}}) ProcessExtrinsic(_ *storage.Block, _ *storage.Extrinsic,_ []storage.Event) error {
	return nil
}

func (a *{{.ModClass}}) ProcessEvent(_ *storage.Block,_ *storage.Event,_ decimal.Decimal) error {
	return nil
}

func (a *{{.ModClass}}) Migrate() {
}

func (a *{{.ModClass}}) Version() string {
	return "0.1"
}

func (a *{{.ModClass}}) SubscribeExtrinsic() []string{
    return nil
}

func (a *{{.ModClass}}) SubscribeEvent() []string{
    return nil
}

func (a *{{.ModClass}}) Enable() bool{
    return true
}

func (a *{{.ModClass}}) ConsumptionQueue() []string{
    return nil
}

func (a *{{.ModClass}}) SetRedisPool(_ subscan_plugin.RedisPool) {

}

func (a *{{.ModClass}})ExecWorker(context.Context, string, string, interface{}) error {
    return nil
}
